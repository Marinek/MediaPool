// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package de.mediapool.web.ui;

import com.vaadin.data.Item;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.Table;
import de.mediapool.web.EntityTableColumnGenerator;
import entity.user.Holding;
import java.lang.Class;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.List;

privileged aspect HoldingView_Roo_VaadinEntityView {
    
    public String HoldingView.getEntityName() {
        return "Holding";
    }
    
    public Class<Holding> HoldingView.getEntityClass() {
        return Holding.class;
    }
    
    public boolean HoldingView.isCreateAllowed() {
        return true;
    }
    
    public boolean HoldingView.isUpdateAllowed() {
        return true;
    }
    
    public boolean HoldingView.isDeleteAllowed() {
        return true;
    }
    
    public List<Holding> HoldingView.listEntities() {
        List<Holding> list = Holding.findAllHoldings();
        return list;
    }
    
    public Holding HoldingView.saveEntity(Holding entity) {
        if (entity == null) {
            return null;
        }
        return (Holding) entity.merge();
    }
    
    public void HoldingView.deleteEntity(Holding entity) {
        if (entity != null) {
            entity.remove();
        }
    }
    
    public boolean HoldingView.isNewEntity(Holding entity) {
        return (entity != null && getIdForEntity(entity) == null);
    }
    
    public String HoldingView.getIdProperty() {
        return "id";
    }
    
    public String HoldingView.getVersionProperty() {
        return "version";
    }
    
    public Holding HoldingView.createEntityInstance() {
        return new Holding();
    }
    
    public BeanContainer<Long, Holding> HoldingView.getTableContainer() {
        BeanContainer<Long, Holding> container = new BeanContainer<Long, Holding>(Holding.class);
        container.setBeanIdProperty("id");
        for (Holding entity : Holding.findAllHoldings()) {
            container.addBean(entity);
        }
        return container;
    }
    
    public Item HoldingView.getItemForEntity(Holding entity) {
        Item item = getTable().getItem(entity.getId());
        if (item == null) {
            item = new BeanItem<Holding>(entity);
        }
        return item;
    }
    
    public Holding HoldingView.getEntityForItem(Item item) {
        if (item != null) {
            return ((BeanItem<Holding>) item).getBean();
        } else {
            return null;
        }
    }
    
    public Object HoldingView.getIdForEntity(Holding entity) {
        return entity != null ? entity.getId() : null;
    }
    
    public void HoldingView.setupGeneratedColumns(Table table) {
        table.removeGeneratedColumn("media");
        table.addGeneratedColumn("media", new EntityTableColumnGenerator((String) getMediaCaptionPropertyId()));
        table.removeGeneratedColumn("muser");
        table.addGeneratedColumn("muser", new EntityTableColumnGenerator((String) getMUserCaptionPropertyId()));
    }
    
    public Object HoldingView.getMediaCaptionPropertyId() {
        return null;
    }
    
    public Object HoldingView.getMUserCaptionPropertyId() {
        return null;
    }
    
}
