package de.mediapool.ui.composits.authentification;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.VaadinSession;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;

import de.mediapool.core.beans.business.authentication.UserBean;
import de.mediapool.core.exceptions.MPException;
import de.mediapool.core.services.MPLocalService;
import de.mediapool.core.services.interfaces.IAuthService;
import de.mediapool.ui.composits.main.MainPanel;
import de.mediapool.ui.utils.MPExceptionUtil;

public class AuthenticationPanel extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private GridLayout authGrid;
	@AutoGenerated
	private Button btLogin;
	@AutoGenerated
	private TextField tfPassword2;
	@AutoGenerated
	private TextField tfUsername;

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// Statische Deklarationen
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public AuthenticationPanel() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.btLogin.addClickListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			public void buttonClick(ClickEvent event) {
				IAuthService authService = MPLocalService.getInstance().getAuthService();
				try {
					UserBean auth = authService.auth(tfUsername.getValue(), tfPassword2.getValue());

					VaadinSession.getCurrent().setAttribute(UserBean.class, auth);

					getUI().setContent(new MainPanel());
				} catch (MPException e) {
					MPExceptionUtil.showMPExceptionDialog(e, getUI());
				}
			}
		});
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setCaption("Authentifizierung / Login");
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// panel_1
		panel_1 = buildPanel_1();
		mainLayout.addComponent(panel_1, "top:20.0px;right:20.0px;left:20.0px;");

		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPanel_1() {
		// common part: create layout
		panel_1 = new Panel();
		panel_1.setImmediate(false);
		panel_1.setWidth("100.0%");
		panel_1.setHeight("180px");

		// authGrid
		authGrid = buildAuthGrid();
		panel_1.setContent(authGrid);

		return panel_1;
	}

	@AutoGenerated
	private GridLayout buildAuthGrid() {
		// common part: create layout
		authGrid = new GridLayout();
		authGrid.setCaption("Benutzer authentifizierung");
		authGrid.setImmediate(false);
		authGrid.setWidth("100.0%");
		authGrid.setHeight("-1px");
		authGrid.setMargin(true);
		authGrid.setSpacing(true);
		authGrid.setColumns(4);
		authGrid.setRows(3);

		// tfUsername
		tfUsername = new TextField();
		tfUsername.setCaption("Benutzername");
		tfUsername.setImmediate(false);
		tfUsername.setWidth("-1px");
		tfUsername.setHeight("-1px");
		tfUsername.setRequired(true);
		authGrid.addComponent(tfUsername, 2, 0);

		// tfPassword2
		tfPassword2 = new TextField();
		tfPassword2.setCaption("Passwort");
		tfPassword2.setImmediate(false);
		tfPassword2.setWidth("-1px");
		tfPassword2.setHeight("-1px");
		tfPassword2.setRequired(true);
		authGrid.addComponent(tfPassword2, 2, 1);

		// btLogin
		btLogin = new Button();
		btLogin.setCaption("Login");
		btLogin.setImmediate(true);
		btLogin.setWidth("-1px");
		btLogin.setHeight("-1px");
		authGrid.addComponent(btLogin, 2, 2);

		return authGrid;
	}

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// Member Variablen
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// Konstruktoren
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// public Methoden
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// protected Methoden
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// private Methoden
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	// abstrakte Methoden
	// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
}
